@page "/diagram-features"
@rendermode InteractiveAuto
@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Diagram.SymbolPalette
@using Syncfusion.Blazor.Navigations
@using DiagramShapes = Syncfusion.Blazor.Diagram.NodeShapes
@using DiagramSegments = Syncfusion.Blazor.Diagram.ConnectorSegment
@using Orientation= Syncfusion.Blazor.Diagram.Orientation
<PageTitle>Diagram</PageTitle>
<h2>Diagram</h2>
<br/>
<div id = "ControlRegion">
              <div class="col-lg-8 control-section sb-property-border">
    <div class="content-wrapper">
        <SfDiagramComponent @ref="@diagram"  Width="100%" Height="390px" Constraints="@diagramConstraints" InteractionController="@DiagramInteractions.ZoomPan" ConnectorCreating="@ConnectorCreating" NodeCreating="@NodeCreating">
            <DataSourceSettings ID="Name" ParentID="Category" DataSource="@DataSource">
            </DataSourceSettings>
            <Layout Type="LayoutType.HierarchicalTree" VerticalSpacing="30" HorizontalSpacing="30" GetLayoutInfo="GetLayoutInfo"></Layout>
            <SnapSettings>
                <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@GridLineIntervals">
                  </HorizontalGridLines>
                <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@GridLineIntervals">
                  </VerticalGridLines>
            </SnapSettings>
            <PageSettings>
            </PageSettings>
            <ScrollSettings ScrollLimit="ScrollLimitMode.Limited" >
            </ScrollSettings>
        </SfDiagramComponent>
    </div>
</div>
</div>
<br/>
<div>
  <h3>Selected Features:</h3>
    <ul class="ulstyle">
      <li class="list"> Diagram Samples - Hierarchical Tree Layout</li>
      <li class="list"> Page Editable</li>
      <li class="list"> Gridlines and snapping</li>
      <li class="list"> Theme - Tailwind CSS</li>
    </ul>
</div>
<br/>
<style>
    .control-section{
        margin:0 auto;
    }
    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }
    .list {
    float: left;
    line-height: 20px;
    margin: 10px;
    min-width: 340px;
    }
</style>
          @functions{
    DiagramConstraints diagramConstraints = DiagramConstraints.Default;
    public double[] GridLineIntervals = new double[] {
            1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75
    };
    SfDiagramComponent? diagram;
    private TreeInfo GetLayoutInfo(IDiagramObject obj, TreeInfo options)
    {
        options.EnableSubTree = true;
        options.Orientation = Orientation.Horizontal;
        return options;
    }
    private void ConnectorCreating(IDiagramObject connector)
    {
        Connector? newConnector = connector as Connector;
        newConnector!.TargetDecorator = new DecoratorSettings()
            {
                Shape = DecoratorShape.None,
            };
        newConnector.Type = ConnectorSegmentType.Orthogonal;
        newConnector.Style = new ShapeStyle() { StrokeColor = "#6d6d6d" };
        newConnector.Constraints = ConnectorConstraints.None;
        newConnector.CornerRadius = 5;
    }
    private void NodeCreating(IDiagramObject obj)
    {
        Node? node = obj as Node;
        HierarchicalDetails? hierarchicalData = node!.Data as HierarchicalDetails;
        node.Style = new ShapeStyle() { Fill = "#659be5", StrokeColor = "none", StrokeWidth = 2, };
        node.BackgroundColor = "#659be5";
          node.Width = 150;
        node.Height = 50;
        node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
        {
            new ShapeAnnotation()
            {
                Content = hierarchicalData!.Name,
                Style=new TextStyle(){Color="white"},
            }
        };
        node.ExpandIcon = new DiagramExpandIcon()
            {
                Height = 10,
                Width = 10,
                Shape = DiagramExpandIcons.ArrowDown,
                Fill = "lightgray",
                OffsetX = 0.5,
                OffsetY = 1,
                VerticalAlignment = VerticalAlignment.Auto,
                Margin = new DiagramThickness() { Bottom = 0, Left = 0, Right = 0, Top = 0 }
            };
        node.CollapseIcon = new DiagramCollapseIcon()
            {
                OffsetX = 0.5,
                OffsetY = 1,
                VerticalAlignment = VerticalAlignment.Auto,
                Height = 10,
                Width = 10,
                Shape = DiagramCollapseIcons.ArrowUp,
                Fill = "lightgray",
                Padding = new DiagramThickness() { Top = 5 }
            };
    }
    public class HierarchicalDetails
    {
        public string?  Name { get; set; }
        public string?  FillColor { get; set; }
        public string?  Category { get; set; }
    }
    public List<object> DataSource = new List<object>()
    {
        new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="Layout", Category="Diagram",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="Tree Layout", Category="Layout",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="Organizational Chart", Category="Layout",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="Hierarchical Tree", Category="Tree Layout",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="Radial Tree", Category="Tree Layout",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="Mind Map", Category="Hierarchical Tree",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="Family Tree", Category="Hierarchical Tree",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="Management", Category="Organizational Chart",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="Human Resources", Category="Management",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="University", Category="Management",FillColor="#659be5"},
        new HierarchicalDetails(){ Name ="Business", Category="#Management",FillColor="#659be5"}
    };  
}
